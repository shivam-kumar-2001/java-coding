Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.
Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]

code c++
class Solution {
public:
   
    vector<vector<int>> combine(int n, int k) {
				 vector<vector<int>> ans;
				 vector<int> v;
				 helper(1,n,v,ans,k);
				 return ans;
    }
		void helper(int st,int n,vector<int>& temp,vector<vector<int>>& ans,int k)
		{
			if(temp.size()==k)
			{
				ans.push_back(temp);
				return;
			}
			for(int i=st;i<=n;i++)
			{
				temp.push_back(i);
				helper(i+1,n,temp,ans,k);
				temp.pop_back();
			}
		}
};


java :

class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new ArrayList();

				helper(1,n,new ArrayList(),ans,k);
				return ans;
    }
		void helper(int st,int n,List<Integer> curr, List<List<Integer>> ans,int k)
		{
			if(curr.size()==k)
			{
				ans.add(new ArrayList(curr));
				return;
			}
			for(int i=st;i<=n;i++)
			{
				curr.add(i);
				helper(i+1,n,curr,ans,k);
				curr.remove(curr.size()-1);
			}
		}
}
