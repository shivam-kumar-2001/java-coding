
/*Given an array of jobs where every job has a deadline and associated profit if the job is finished before the deadline. It is also given that every 
the job takes a single unit of time, so the minimum possible deadline for any job is 1. Maximize the total profit if only one job can be scheduled at a 
time.

Follow the given steps to solve the problem:

Sort all jobs in decreasing order of profit.
Iterate on jobs in decreasing order of profit. For each job, do the following :
Find a time slot i, such that slot is empty and i < deadline and i is greatest. Put the job in
this slot and mark this slot filled.
If no such i exists, then ignore the job.

*/
import java.util.*;
class Job {
    char ch;
    int deadline, profit;
    Job(char c, int d, int p) {
        this.ch = c;
        this.deadline = d;
        this.profit = p;
    }
}

class App {
    public static void main(String[] args) {
        ArrayList<Job> arr = new ArrayList<Job>();
        arr.add(new Job('a', 2, 100));
        arr.add(new Job('b', 1, 19));
        arr.add(new Job('c', 2, 27));
        arr.add(new Job('d', 1, 25));
        arr.add(new Job('e', 3, 15));

        jobSeduling(arr, 3);
    }
    static void jobSeduling(ArrayList<Job> arr, int t) {
        boolean temp[] = new boolean[t];
        char ans[] = new char[t];

        Collections.sort(arr, (a, b) -> { // // Sort all jobs according to decreasing order of profit
            return b.profit - a.profit;
        });

        for (int i = 0; i < arr.size(); i++) {
            for (int j = Math.min(t - 1, arr.get(i).deadline - 1); j >= 0; j--) {
                if (temp[j] == false) {
                    temp[j] = true;
                    ans[j] = arr.get(i).ch;
                    break;
                }
            }


        }
        for (char jb : ans)
            System.out.print(jb + " ");



    }
}

