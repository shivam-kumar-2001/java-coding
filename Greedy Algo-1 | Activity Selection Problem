The goal of the interval scheduling maximization problem is to identify the largest compatible set or a collection of intervals with the least possible overlap. 

import java.lang.*;
import java.util.Arrays;
import java.util.Comparator;

class Activity {
    int start, end;
    Activity(int st, int ed) {
        this.start = st;
        this.end = ed;
    }
}
class Compare {
    public void compare(Activity arr[], int n) {
        Arrays.sort(arr, new Comparator<Activity>() {
            @Override
            public int compare(Activity s1, Activity s2) {
                return s1.end - s2.end;
            }
        });
    }
}
class App {
    public static void printMaxActivities(Activity arr[], int n) {
        Compare obj = new Compare();
        obj.compare(arr, n); //sort the Activity pairs
        int i = 0;
        System.out.println("(" + arr[i].start + "," + arr[i].end + ")");
        for (int j = 1; j < n; j++) {
            if (arr[j].start >= arr[i].end) {
                System.out.println("(" + arr[j].start + "," + arr[j].end + ")");
                i = j;
            }
        }
    }
    public static void main(String[] args) {
        int n = 6;
        Activity[] arr = new Activity[n];
        arr[0] = new Activity(5, 9);
        arr[1] = new Activity(1, 2);
        arr[2] = new Activity(3, 4);
        arr[3] = new Activity(0, 6);
        arr[4] = new Activity(5, 7);
        arr[5] = new Activity(8, 9);

        printMaxActivities(arr, n);

    }
}
