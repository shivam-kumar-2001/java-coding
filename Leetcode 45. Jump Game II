link = https://www.youtube.com/watch?v=wLPdkLM_BWo&ab_channel=CodewithAlisha

You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any 
nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

code : 
class Solution {
    public int jump(int[] nums) {
        return minJump(nums,nums.length);
    }
    public int minJump(int[] arr, int n) {
        int temp[] = new int[n];
        temp[n - 1] = 0;
        for (int i = n - 2; i >= 0; i--) {
            int mini = Integer.MAX_VALUE - 1;
            for (int j = i + 1; j < Math.min(i + arr[i] + 1, n); j++) {
                mini = Math.min(mini, temp[j] + 1);
            }
            temp[i] = mini;
        }
        return temp[0];
    }
}
