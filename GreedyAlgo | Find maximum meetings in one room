There is one meeting room in a firm. There are N meetings in the form of (S[i], F[i]) where S[i] is the start time of meeting i and F[i] is the finish 
time of meeting i. The task is to find the maximum number of meetings that can be accommodated in the meeting room. Print all meeting numbers

Input: s[] = {1, 3, 0, 5, 8, 5}, f[] = {2, 4, 6, 7, 9, 9} 
Output: 1 2 4 5
First meeting [1, 2] 
Second meeting [3, 4] 
Fourth meeting [5, 7] 
Fifth meeting [8, 9]


Java code :
import java.util.*;
class mycomparator implements Comparator<meeting> {
    @Override public int compare(meeting o1, meeting o2) {
        return o1.finish > o2.finish ? 1 : -1;
    }
}
class meeting {
    int start, finish, pos;
    meeting(int st, int end, int pos) {
        this.start = st;
        this.finish = end;
        this.pos = pos;
    }
}


class App {
    public static void main(String[] args) {
        // Starting time
        int s[] = { 1, 3, 0, 5, 8, 5 };

        // Finish time
        int f[] = { 2, 4, 6, 7, 9, 9 };

        int N = s.length;
        ArrayList<meeting> al = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            al.add(new meeting(s[i], f[i], i));
        }

        maxMeeting(al, N);

    }

    public static void maxMeeting(ArrayList<meeting> al, int N) {
        ArrayList<Integer> ans = new ArrayList<>();
        mycomparator mc = new mycomparator();
        Collections.sort(al, mc);
        int time_limit = al.get(0).finish;
        ans.add(al.get(0).pos + 1);

        for (int i = 1; i < N; i++) {
            if (al.get(i).start > time_limit) {
                time_limit = al.get(i).finish;
                ans.add(al.get(i).pos + 1);
            }
        }

        for (int i = 0; i < ans.size(); i++) {
            System.out.println(ans.get(i));
        }
    }

}


C++ code :

#include <bits/stdc++.h>
using namespace std;

void maxMeetings(int s[], int f[], int N)
{
    pair<int, int> a[N + 1];
    for (int i = 0; i < N; i++)
    {
        a[i].first = f[i];
        a[i].second = s[i];
    }

    sort(a, a + N);

    vector<pair<int, int>> m;
    int time_limit = a[0].first;
    m.push_back({a[0].second, a[0].first});

    for (int i = 1; i < N; i++)
    {
        if (a[i].second > time_limit)
        {
            m.push_back({a[i].second, a[i].first});
            time_limit = a[i].first;
        }
    }
    for (pair<int, int> x : m)
    {
        cout << x.first << " " << x.second << endl;
    }
}


int main()
{
    // Starting time
    int s[] = { 1, 3, 0, 5, 8, 5 };

    // Finish time
    int f[] = { 2, 4, 6, 7, 9, 9 };

    // Number of meetings.
    int N = sizeof(s) / sizeof(s[0]);

    // Function call
    maxMeetings(s, f, N);

    return 0;
}
